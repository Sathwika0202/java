// print sum from i to n numbers.


public class Main{
    public static void printSum(int i, int n, int sum){
        if(i==n){
            sum+=i;
            System.out.println(sum);
            return;
        }
        sum+=i;
        printSum(i+1,n,sum);
    }
    
    public static void main(String[] args){
        int i = 5;
        int n = 10;
        int sum = 0;
        printSum(i,n,sum);
    }
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//factorial of n

public class Main{
    public static int factorial(int n){
        if(n==0||n==1){
            return 1;
        }
        return (n*factorial(n-1));
    }
    
    public static void main(String[] args){
        int fact=factorial(3);
        System.out.println(fact);
    }
}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// fibonacci series of given n 

public class Main{
    public static void fibo(int a,int b, int n){
        if(n==0){
            return ;
        }
        int c = a+b;
        System.out.print(c+" ");
        fibo(b,c,n-1);
    }
    
    public static void main(String[] args){
        int a = 0, b = 1;
        System.out.print(a+" ");
        System.out.print(b+" ");
        int n = 7;
        fibo(a,b,n-2);
    }
}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//print x^n (Stack height = n)

public class Main{
    public static int printPow(int x, int n){
        if(n==0){
            return 1;
        }
        if(x==0){
            return 0;
        }
        return(x*printPow(x,n-1));
    }
    public static void main(String[] args){
        int x = 3;
        int n = 4;
        int power = printPow(x,n);
        System.out.println(power);
    }
}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//print x^n (Stack height = log n)

public class Main{
    public static int printPow(int x, int n){
        if(n==0){
            return 1;
        }
        if(x==0){
            return 0;
        }
        if(n%2==0){
            return printPow(x,n/2)*printPow(x,n/2);
        }else{
            return printPow(x,n/2)*printPow(x,n/2)*x;
        }
    }
    public static void main(String[] args){
        int x = 3;
        int n = 4;
        int power = printPow(x,n);
        System.out.println(power);
    }
}



//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//Tower of Hanoi

class Main {
    public static void tower(int n , String src, String helper, String dest){
        if(n==1){
            System.out.println("move disk "+n+" from "+src+" to "+dest);
            return;
        }
        tower(n-1,src,dest,helper);
        System.out.println("move disk "+n+" from "+src+" to "+dest);
        tower(n-1,helper,src,dest);
    }
    
    public static void main(String[] args) {
        int n = 3;
        tower(n,"S","H","D");
    }
}




//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//reverse string


class Main {
    public static void reverseString(String s, int n){
        if(n==0){
            return;
        }
        System.out.print(s.charAt(n-1));
        reverseString(s, n-1);
    }
    
    public static void main(String[] args) {
       
        String std="apple";
        int n = std.length();
        reverseString(std,n);
    }
}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// find the 1st and last occurence of an element in a string 

public class Main{
    public static int first = -1;
    public static int last = -1;
    
    public static void findOccurence(String str, int idx, char element)
    {
        if(idx==str.length()){
            System.out.println(first);
            System.out.println(last);
            return ;
        }
        
        char currChar = str.charAt(idx);
        if(currChar==element){
            if(first == -1){
                first++;
            }
            else{
                last=idx;
            }
        }
        findOccurence(str,idx+1,element);
    }
    
    
    public static void main(String[]args){
        String str = "aabacdeeaab";
        char ele = 'a';
        int idx = 0;
        findOccurence(str,idx,ele);
    }
}



//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Check whether the array is sorted (Strictly increasing)

class Main {
    
    public static boolean checkSorted(int[] arr, int idx){
        if(idx==arr.length-1){
            return true;
        }
        
        if(arr[idx]<arr[idx+1])
            return checkSorted(arr,idx+1);
        else
            return false;
            
    }
    public static void main(String[] args) {
        int[] arr = {1,2,3,4,5};
        System.out.println(checkSorted(arr,0));
    }
}



//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Write all the x in the end of the string (input: axbbxcd   output: abbcdxx)


class Main {
    
    public static void moveAllX(String str, int idx,int count, String newString){
        if(idx==str.length()){
            for(int i=0;i<count;i++){
                newString+='x';
            }
            System.out.println(newString) ;
            return;
        }
        char currChar = str.charAt(idx);
        if(currChar=='x'){
            count++;
            moveAllX(str,idx+1,count,newString);
            
        }else{
            newString+=currChar;
            moveAllX(str,idx+1,count,newString);
        }
            
        
    }
    public static void main(String[] args) {
        
        String sr="axbbxcd";
        moveAllX(sr,0,0,"");
    }
}




//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Remove duplicates from string  (input: aabbcdsd         output: abcds)


class Main {
    
    public static boolean[] map=new boolean[26];
    
    public static void removeDuplicates(String str, int idx, String newString){
        if(idx==str.length()){
            System.out.println(newString);
            return;
        }
        
        char currChar = str.charAt(idx);
        if(map[currChar-'a']==true){
            removeDuplicates(str,idx+1,newString);
        }else{
            map[currChar-'a']=true;
            newString+=currChar;
            removeDuplicates(str,idx+1,newString);
            
        }
    }
    
    public static void main(String[] args) {
        
        String sr="aabbcdsd";
        removeDuplicates(sr,0,"");
    }
}




//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//Print all subsequences of a string
(input : abc  
output : 
abc
ab
ac
a
bc
b
c  )


class Main {
    
    public static void subSequence(String str, int idx, String newString){
        if(idx==str.length()){
            System.out.println(newString);
            return;
        }
        char currchar = str.charAt(idx);
        subSequence(str,idx+1,newString+currchar);
        subSequence(str,idx+1,newString);
        
        
    }
    
    public static void main(String[] args) {
        
        String sr="abc";
        subSequence(sr,0,"");
    }
}





//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//Print all unique subsequences of a string

// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.HashSet;
class apnaclg {
    
    public static void subSequence(String str, int idx, String newString,HashSet<String> set){
        
    
        if(idx==str.length()){
            if(set.contains(newString)){
                return;
            }
            else{
                System.out.println(newString);
                set.add(newString);
                return; 
            }
            
        }
        char currchar = str.charAt(idx);
        subSequence(str,idx+1,newString+currchar,set);
        subSequence(str,idx+1,newString,set);
        
        
    }
    
    public static void main(String[] args) {
        
        String sr="aaa";
        HashSet<String> set = new HashSet<>();
        subSequence(sr,0,"",set);
    }
}





//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//Print combinations of a keypad 


// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.HashSet;
class apnaclg {
    public static String[] keypad = {".","abc","def","ghi","jkl","mno","pqrs","tu","vwx","yz"}; 
    public static void keypadComb(int idx, String str, String combination){

        if(idx==str.length()){
            System.out.println(combination);
            return;
        }
        char currChar = str.charAt(idx);
        String mapping = keypad[currChar-'0'];

        for(int i=0;i<mapping.length();i++){
            keypadComb(idx+1,str,combination+mapping.charAt(i));
        }
    }
    
    public static void main(String[] args) {
        String str = "23";
        keypadComb(0,str,"");
    }
}
